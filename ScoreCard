<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üõ§Ô∏è The Privacy Trail</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/umd/lucide.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            background: linear-gradient(135deg, #dbeafe 0%, #e0e7ff 100%);
            min-height: 100vh;
        }
        .game-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 24px;
        }
        .score-meter {
            transition: all 0.3s ease;
        }
        .leaderboard-item:hover {
            background-color: #f9fafb;
        }
        .animate-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: .5; }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="bg-white rounded-lg shadow-xl p-8">
            <!-- Header -->
            <div class="text-center mb-8">
                <h1 class="text-4xl font-bold text-gray-800 mb-2">üõ§Ô∏è The Privacy Trail</h1>
                <p class="text-lg text-gray-600 italic">Survive the Trail. Protect the Trust. Avoid Dying of a Data Breach.</p>
                
                <!-- View Toggle -->
                <div class="flex justify-center mt-6">
                    <div class="bg-gray-200 p-1 rounded-lg">
                        <button id="gameBtn" class="px-4 py-2 rounded-md font-medium transition-all bg-blue-500 text-white shadow-md">
                            <i data-lucide="gamepad-2" class="w-4 h-4 inline mr-2"></i>
                            Game
                        </button>
                        <button id="dashboardBtn" class="px-4 py-2 rounded-md font-medium transition-all text-gray-600 hover:text-gray-800">
                            <i data-lucide="bar-chart-3" class="w-4 h-4 inline mr-2"></i>
                            Dashboard (<span id="teamCount">0</span>)
                        </button>
                    </div>
                </div>
            </div>

            <!-- Game View -->
            <div id="gameView">
                <!-- Team Registration -->
                <div id="teamRegistration" class="mb-8">
                    <label class="block text-lg font-semibold text-gray-700 mb-2">
                        <i data-lucide="users" class="inline w-5 h-5 mr-2"></i>
                        Team Name:
                    </label>
                    <div class="flex gap-3">
                        <input type="text" id="teamNameInput" class="flex-1 p-3 border-2 border-gray-300 rounded-lg text-lg font-medium" placeholder="Enter your team name...">
                        <button id="registerBtn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-lg transition-colors">
                            Start Game
                        </button>
                    </div>
                </div>

                <!-- Game Content -->
                <div id="gameContent" class="hidden">
                    <!-- Current Team Display -->
                    <div class="bg-gradient-to-r from-blue-100 to-purple-100 p-4 rounded-lg mb-6 border-2 border-blue-200">
                        <div class="flex justify-between items-center">
                            <div>
                                <h2 class="text-xl font-bold text-gray-800">Team: <span id="currentTeamName"></span></h2>
                            </div>
                            <button id="changeTeamBtn" class="bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-lg transition-colors text-sm">
                                Change Team
                            </button>
                        </div>
                    </div>

                    <!-- Score Display -->
                    <div class="grid grid-cols-3 gap-6 mb-8">
                        <div class="text-center p-6 bg-blue-50 rounded-lg shadow-md">
                            <i data-lucide="shield" class="w-8 h-8 mx-auto mb-2 text-blue-600"></i>
                            <h3 class="text-lg font-semibold text-gray-700">Trust</h3>
                            <div id="trustScore" class="text-3xl font-bold text-green-600">10</div>
                            <div id="trustStatus" class="text-sm text-gray-500">HEALTHY</div>
                        </div>
                        <div class="text-center p-6 bg-green-50 rounded-lg shadow-md">
                            <i data-lucide="check-circle" class="w-8 h-8 mx-auto mb-2 text-green-600"></i>
                            <h3 class="text-lg font-semibold text-gray-700">Compliance</h3>
                            <div id="complianceScore" class="text-3xl font-bold text-green-600">10</div>
                            <div id="complianceStatus" class="text-sm text-gray-500">HEALTHY</div>
                        </div>
                        <div class="text-center p-6 bg-yellow-50 rounded-lg shadow-md">
                            <i data-lucide="zap" class="w-8 h-8 mx-auto mb-2 text-yellow-600"></i>
                            <h3 class="text-lg font-semibold text-gray-700">Velocity</h3>
                            <div id="velocityScore" class="text-3xl font-bold text-green-600">10</div>
                            <div id="velocityStatus" class="text-sm text-gray-500">HEALTHY</div>
                        </div>
                    </div>

                    <!-- Game Status -->
                    <div id="gameStatus" class="hidden mb-6 p-4 rounded-lg text-center font-bold text-lg"></div>

                    <!-- Scenarios -->
                    <div id="scenarios" class="space-y-8">
                        <!-- Scenarios will be dynamically generated -->
                    </div>

                    <!-- Reset Button -->
                    <div class="text-center mt-8">
                        <button id="resetBtn" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                            üîÑ Reset Game
                        </button>
                    </div>
                </div>
            </div>

            <!-- Dashboard View -->
            <div id="dashboardView" class="hidden">
                <div class="bg-gradient-to-r from-purple-100 to-blue-100 p-6 rounded-lg border-2 border-purple-200">
                    <div class="flex items-center justify-between mb-4">
                        <h2 class="text-2xl font-bold text-gray-800 flex items-center">
                            <i data-lucide="bar-chart-3" class="w-8 h-8 mr-3 text-purple-600"></i>
                            Team Dashboard
                        </h2>
                        <div class="text-sm text-gray-600">
                            <span id="totalTeams">0</span> team(s) registered
                        </div>
                    </div>

                    <!-- Empty State -->
                    <div id="emptyDashboard" class="text-center py-8 text-gray-500">
                        <i data-lucide="users" class="w-12 h-12 mx-auto mb-3 opacity-50"></i>
                        <p>No teams have started playing yet!</p>
                        <p class="text-sm">Switch to Game view to start playing.</p>
                    </div>

                    <!-- Dashboard Content -->
                    <div id="dashboardContent" class="hidden">
                        <!-- Controls -->
                        <div class="bg-white rounded-lg p-4 mb-6 shadow-md">
                            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                                <div class="relative">
                                    <i data-lucide="search" class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"></i>
                                    <input type="text" id="searchInput" placeholder="Search teams..." class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                </div>
                                <select id="statusFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <option value="all">All Teams</option>
                                    <option value="active">Active</option>
                                    <option value="completed">Winners</option>
                                    <option value="failed">Game Over</option>
                                </select>
                                <select id="sortBy" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <option value="score">Sort by Score</option>
                                    <option value="name">Sort by Name</option>
                                    <option value="progress">Sort by Progress</option>
                                </select>
                                <div class="flex gap-2">
                                    <button id="exportCSV" class="flex-1 bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-3 rounded-lg transition-colors text-sm">
                                        <i data-lucide="download" class="w-4 h-4 inline mr-1"></i>
                                        CSV
                                    </button>
                                    <button id="exportJSON" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-3 rounded-lg transition-colors text-sm">
                                        <i data-lucide="download" class="w-4 h-4 inline mr-1"></i>
                                        JSON
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Quick Stats -->
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                            <div class="bg-white p-4 rounded-lg shadow-md text-center">
                                <div id="winnersCount" class="text-2xl font-bold text-green-600">0</div>
                                <div class="text-sm text-gray-600">Winners</div>
                            </div>
                            <div class="bg-white p-4 rounded-lg shadow-md text-center">
                                <div id="gameOverCount" class="text-2xl font-bold text-red-600">0</div>
                                <div class="text-sm text-gray-600">Game Over</div>
                            </div>
                            <div class="bg-white p-4 rounded-lg shadow-md text-center">
                                <div id="activeCount" class="text-2xl font-bold text-blue-600">0</div>
                                <div class="text-sm text-gray-600">In Progress</div>
                            </div>
                            <div class="bg-white p-4 rounded-lg shadow-md text-center">
                                <div id="avgRounds" class="text-2xl font-bold text-purple-600">0</div>
                                <div class="text-sm text-gray-600">Avg Rounds</div>
                            </div>
                        </div>

                        <!-- Leaderboard -->
                        <div class="bg-white rounded-lg shadow-lg overflow-hidden mb-6">
                            <div class="bg-gradient-to-r from-yellow-400 to-orange-400 p-4">
                                <h3 class="text-xl font-bold text-white flex items-center">
                                    <i data-lucide="trophy" class="w-6 h-6 mr-2"></i>
                                    Leaderboard
                                </h3>
                            </div>
                            <div id="leaderboard" class="divide-y divide-gray-200 max-h-96 overflow-y-auto">
                                <!-- Leaderboard items will be populated here -->
                            </div>
                        </div>

                        <!-- Clear Teams Button -->
                        <div class="text-center">
                            <button id="clearAllBtn" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                                üóëÔ∏è Clear All Teams
                            </button>
                        </div>
                    </div>

                    <!-- Workshop Instructions -->
                    <div class="mt-6 text-center text-sm text-gray-600">
                        <p>üí° <strong>Multi-Team Instructions:</strong></p>
                        <p>‚Ä¢ Each team registers with a unique name and plays independently</p>
                        <p>‚Ä¢ All teams can view this dashboard to see everyone's progress</p>
                        <p>‚Ä¢ The leaderboard updates in real-time as teams make choices</p>
                        <p>‚Ä¢ Up to 50+ teams can play simultaneously!</p>
                        <p>‚Ä¢ Use search and filters to manage large groups</p>
                        <p>‚Ä¢ Export data as CSV or JSON for analysis</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Game data and state
        let teams = [];
        let currentTeam = null;
        let currentView = 'game';
        
        const scenarios = {
            1: {
                title: "The Great Data Grab",
                description: "Your team wants to collect as much user data as possible for future personalization",
                options: {
                    A: { label: "Collect Everything", trust: -3, compliance: -3, velocity: +3 },
                    B: { label: "Collect what you need", trust: +2, compliance: +3, velocity: -1 },
                    C: { label: "Delay launch for data mapping", trust: +3, compliance: +3, velocity: -3 }
                }
            },
            2: {
                title: "River of Vendors",
                description: "Your analytics vendor was fined for shady practices. No DPA signed. Legal is OOO.",
                options: {
                    A: { label: "Proceed", trust: -3, compliance: -5, velocity: +2 },
                    B: { label: "Choose certified vendor", trust: +3, compliance: +4, velocity: -3 },
                    C: { label: "Wait for legal", trust: -1, compliance: -2, velocity: 0 }
                }
            },
            3: {
                title: "UX Snakebite",
                description: "Marketing requests pop-up for birthday, zip code, shopping habits before user sees value",
                options: {
                    A: { label: "Ship pop-up now", trust: -4, compliance: -3, velocity: +2 },
                    B: { label: "Delay collection post-value", trust: +2, compliance: +2, velocity: -1 },
                    C: { label: "Redesign UX with privacy principles", trust: +3, compliance: +3, velocity: -2 }
                }
            },
            4: {
                title: "Surveillance Storm",
                description: "Privacy orgs accuse your product of surveillance. A regulator tweets at you.",
                options: {
                    A: { label: "Deny wrongdoing", trust: -5, compliance: -4, velocity: +2 },
                    B: { label: "Apologize, tweak settings", trust: +1, compliance: +2, velocity: 0 },
                    C: { label: "Full transparency + opt-outs", trust: +4, compliance: +4, velocity: -2 }
                }
            },
            5: {
                title: "Global Expansion Canyon",
                description: "Expanding to EU, LATAM, APAC with different privacy laws. No localized settings.",
                options: {
                    A: { label: "Use U.S model globally", trust: -4, compliance: -5, velocity: +3 },
                    B: { label: "Delay to localize", trust: +3, compliance: +5, velocity: -3 },
                    C: { label: "Launch in low-regulation markets first", trust: -1, compliance: -2, velocity: +2 }
                }
            }
        };

        // Initialize the game
        function init() {
            loadTeamsFromStorage();
            setupEventListeners();
            renderScenarios();
            updateTeamCount();
            lucide.createIcons();
        }

        function setupEventListeners() {
            // View toggles
            document.getElementById('gameBtn').addEventListener('click', () => switchView('game'));
            document.getElementById('dashboardBtn').addEventListener('click', () => switchView('dashboard'));
            
            // Team registration
            document.getElementById('registerBtn').addEventListener('click', registerTeam);
            document.getElementById('teamNameInput').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') registerTeam();
            });
            document.getElementById('changeTeamBtn').addEventListener('click', changeTeam);
            document.getElementById('resetBtn').addEventListener('click', resetGame);
            
            // Dashboard controls
            document.getElementById('searchInput').addEventListener('input', updateDashboard);
            document.getElementById('statusFilter').addEventListener('change', updateDashboard);
            document.getElementById('sortBy').addEventListener('change', updateDashboard);
            document.getElementById('exportCSV').addEventListener('click', exportCSV);
            document.getElementById('exportJSON').addEventListener('click', exportJSON);
            document.getElementById('clearAllBtn').addEventListener('click', clearAllTeams);
        }

        function switchView(view) {
            currentView = view;
            
            if (view === 'game') {
                document.getElementById('gameView').classList.remove('hidden');
                document.getElementById('dashboardView').classList.add('hidden');
                document.getElementById('gameBtn').classList.add('bg-blue-500', 'text-white', 'shadow-md');
                document.getElementById('gameBtn').classList.remove('text-gray-600', 'hover:text-gray-800');
                document.getElementById('dashboardBtn').classList.remove('bg-blue-500', 'text-white', 'shadow-md');
                document.getElementById('dashboardBtn').classList.add('text-gray-600', 'hover:text-gray-800');
            } else {
                document.getElementById('gameView').classList.add('hidden');
                document.getElementById('dashboardView').classList.remove('hidden');
                document.getElementById('dashboardBtn').classList.add('bg-blue-500', 'text-white', 'shadow-md');
                document.getElementById('dashboardBtn').classList.remove('text-gray-600', 'hover:text-gray-800');
                document.getElementById('gameBtn').classList.remove('bg-blue-500', 'text-white', 'shadow-md');
                document.getElementById('gameBtn').classList.add('text-gray-600', 'hover:text-gray-800');
                updateDashboard();
            }
            lucide.createIcons();
        }

        function registerTeam() {
            const teamName = document.getElementById('teamNameInput').value.trim();
            if (!teamName) {
                alert('Please enter a team name');
                return;
            }
            
            const existingTeam = teams.find(team => team.name.toLowerCase() === teamName.toLowerCase());
            if (existingTeam) {
                const confirmOverwrite = confirm(`Team "${teamName}" already exists. Do you want to continue playing as this team?`);
                if (!confirmOverwrite) return;
                currentTeam = existingTeam;
            } else {
                currentTeam = {
                    name: teamName,
                    scores: { trust: 10, compliance: 10, velocity: 10 },
                    roundChoices: {
                        1: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
                        2: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
                        3: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
                        4: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
                        5: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' }
                    },
                    lastUpdated: new Date().toISOString(),
                    isGameOver: false,
                    hasWon: false,
                    completedRounds: 0
                };
                teams.push(currentTeam);
            }
            
            document.getElementById('teamRegistration').classList.add('hidden');
            document.getElementById('gameContent').classList.remove('hidden');
            document.getElementById('currentTeamName').textContent = currentTeam.name;
            updateScores();
            updateScenarios();
            saveTeamsToStorage();
            updateTeamCount();
        }

        function changeTeam() {
            currentTeam = null;
            document.getElementById('teamRegistration').classList.remove('hidden');
            document.getElementById('gameContent').classList.add('hidden');
            document.getElementById('teamNameInput').value = '';
        }

        function resetGame() {
            if (!currentTeam) return;
            
            currentTeam.scores = { trust: 10, compliance: 10, velocity: 10 };
            currentTeam.roundChoices = {
                1: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
                2: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
                3: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
                4: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
                5: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' }
            };
            currentTeam.isGameOver = false;
            currentTeam.hasWon = false;
            currentTeam.completedRounds = 0;
            currentTeam.lastUpdated = new Date().toISOString();
            
            updateScores();
            updateScenarios();
            saveTeamsToStorage();
        }

        function renderScenarios() {
            const scenariosContainer = document.getElementById('scenarios');
            scenariosContainer.innerHTML = '';
            
            Object.entries(scenarios).forEach(([round, scenario]) => {
                const scenarioDiv = document.createElement('div');
                scenarioDiv.className = 'bg-gray-100 p-6 rounded-lg shadow-md';
                scenarioDiv.innerHTML = `
                    <h3 class="text-xl font-bold text-gray-800 mb-2">Round ${round}: ${scenario.title}</h3>
                    <p class="text-gray-600 mb-4">${scenario.description}</p>
                    <div class="space-y-3">
                        ${Object.entries(scenario.options).map(([option, data]) => `
                            <label class="flex items-center p-3 bg-white rounded-lg cursor-pointer hover:bg-blue-50 transition-colors">
                                <input type="radio" name="round${round}" value="${option}" class="mr-3" onchange="makeChoice(${round}, '${option}')">
                                <div class="flex-1">
                                    <div class="font-medium">${option}. ${data.label}</div>
                                    <div class="text-sm text-gray-500">
                                        Trust: ${data.trust > 0 ? '+' : ''}${data.trust}, 
                                        Compliance: ${data.compliance > 0 ? '+' : ''}${data.compliance}, 
                                        Velocity: ${data.velocity > 0 ? '+' : ''}${data.velocity}
                                    </div>
                                </div>
                            </label>
                        `).join('')}
                    </div>
                    <div class="mt-4">
                        <textarea id="notes${round}" placeholder="Team notes for this round..." class="w-full p-2 border border-gray-300 rounded-lg text-sm" rows="2" onchange="updateNotes(${round}, this.value)"></textarea>
                    </div>
                `;
                scenariosContainer.appendChild(scenarioDiv);
            });
        }

        function makeChoice(round, choice) {
            if (!currentTeam) return;
            
            const scenario = scenarios[round];
            const option = scenario.options[choice];
            
            currentTeam.roundChoices[round] = {
                choice,
                trust: option.trust,
                compliance: option.compliance,
                velocity: option.velocity,
                notes: currentTeam.roundChoices[round].notes || ''
            };
            
            // Recalculate scores
            currentTeam.scores = { trust: 10, compliance: 10, velocity: 10 };
            Object.values(currentTeam.roundChoices).forEach(roundChoice => {
                currentTeam.scores.trust += roundChoice.trust;
                currentTeam.scores.compliance += roundChoice.compliance;
                currentTeam.scores.velocity += roundChoice.velocity;
            });
            
            currentTeam.completedRounds = Object.values(currentTeam.roundChoices).filter(r => r.choice !== '').length;
            currentTeam.isGameOver = currentTeam.scores.trust <= 0 || currentTeam.scores.compliance <= 0 || currentTeam.scores.velocity <= 0;
            currentTeam.hasWon = currentTeam.scores.trust > 0 && currentTeam.scores.compliance > 0 && currentTeam.scores.velocity > 0 && currentTeam.completedRounds === 5;
            currentTeam.lastUpdated = new Date().toISOString();
            
            updateScores();
            saveTeamsToStorage();
            updateTeamCount();
        }

        function updateNotes(round, notes) {
            if (!currentTeam) return;
            currentTeam.roundChoices[round].notes = notes;
            currentTeam.lastUpdated = new Date().toISOString();
            saveTeamsToStorage();
        }

        function updateScores() {
            if (!currentTeam) return;
            
            const scores = currentTeam.scores;
            
            // Update score displays
            document.getElementById('trustScore').textContent = scores.trust;
            document.getElementById('complianceScore').textContent = scores.compliance;
            document.getElementById('velocityScore').textContent = scores.velocity;
            
            // Update score colors and status
            updateScoreDisplay('trust', scores.trust);
            updateScoreDisplay('compliance', scores.compliance);
            updateScoreDisplay('velocity', scores.velocity);
            
            // Update game status
            const gameStatus = document.getElementById('gameStatus');
            if (currentTeam.isGameOver) {
                gameStatus.className = 'mb-6 p-4 rounded-lg text-center font-bold text-lg bg-red-100 text-red-800';
                gameStatus.textContent = 'üíÄ GAME OVER - One or more scores reached zero!';
                gameStatus.classList.remove('hidden');
            } else if (currentTeam.hasWon) {
                gameStatus.className = 'mb-6 p-4 rounded-lg text-center font-bold text-lg bg-green-100 text-green-800';
                gameStatus.textContent = 'üéâ CONGRATULATIONS! You survived the Privacy Trail!';
                gameStatus.classList.remove('hidden');
            } else {
                gameStatus.classList.add('hidden');
            }
        }

        function updateScoreDisplay(scoreType, score) {
            const scoreElement = document.getElementById(`${scoreType}Score`);
            const statusElement = document.getElementById(`${scoreType}Status`);
            
            if (score <= 0) {
                scoreElement.className = 'text-3xl font-bold text-red-600';
                statusElement.textContent = 'DEAD';
            } else if (score <= 3) {
                scoreElement.className = 'text-3xl font-bold text-orange-500';
                statusElement.textContent = 'CRITICAL';
            } else if (score <= 6) {
                scoreElement.className = 'text-3xl font-bold text-yellow-500';
                statusElement.textContent = 'WARNING';
            } else {
                scoreElement.className = 'text-3xl font-bold text-green-600';
                statusElement.textContent = 'HEALTHY';
            }
        }

        function updateScenarios() {
            if (!currentTeam) return;
            
            Object.entries(currentTeam.roundChoices).forEach(([round, choice]) => {
                if (choice.choice) {
                    const radio = document.querySelector(`input[name="round${round}"][value="${choice.choice}"]`);
                    if (radio) radio.checked = true;
                }
                const notesField = document.getElementById(`notes${round}`);
                if (notesField) notesField.value = choice.notes || '';
            });
        }

        function updateDashboard() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;
            const sortBy = document.getElementById('sortBy').value;
            
            // Filter teams
            let filteredTeams = teams.filter(team => {
                const matchesSearch = team.name.toLowerCase().includes(searchTerm);
                const matchesStatus = statusFilter === 'all' || 
                    (statusFilter === 'active' && !team.hasWon && !team.isGameOver) ||
                    (statusFilter === 'completed' && team.hasWon) ||
                    (statusFilter === 'failed' && team.isGameOver);
                return matchesSearch && matchesStatus;
            });
            
            // Sort teams
            filteredTeams.sort((a, b) => {
                if (sortBy === 'score') {
                    if (a.hasWon && !b.hasWon) return -1;
                    if (!a.hasWon && b.hasWon) return 1;
                    const aTotalScore = a.scores.trust + a.scores.compliance + a.scores.velocity;
                    const bTotalScore = b.scores.trust + b.scores.compliance + b.scores.velocity;
                    if (aTotalScore !== bTotalScore) return bTotalScore - aTotalScore;
                    return b.completedRounds - a.completedRounds;
                } else if (
