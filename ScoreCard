import React, { useState, useEffect } from 'react';
import { Users, Shield, Zap, Target, AlertTriangle, CheckCircle, BarChart3, Gamepad2, Trophy, Medal, Download, Search, Filter } from 'lucide-react';

const PrivacyTrailScorecard = () => {
  const [currentView, setCurrentView] = useState('game'); // 'game' or 'dashboard'
  const [teamName, setTeamName] = useState('');
  const [isTeamRegistered, setIsTeamRegistered] = useState(false);
  const [teams, setTeams] = useState([]); // Store all teams
  const [scores, setScores] = useState({
    trust: 10,
    compliance: 10,
    velocity: 10
  });
  
  // Dashboard filters and search
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all'); // 'all', 'active', 'completed', 'failed'
  const [sortBy, setSortBy] = useState('score'); // 'score', 'name', 'progress'
  
  const [roundChoices, setRoundChoices] = useState({
    1: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
    2: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
    3: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
    4: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
    5: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' }
  });

  const scenarios = {
    1: {
      title: "The Great Data Grab",
      description: "Your team wants to collect as much user data as possible for future personalization",
      options: {
        A: { label: "Collect Everything", trust: -3, compliance: -3, velocity: +3 },
        B: { label: "Collect what you need", trust: +2, compliance: +3, velocity: -1 },
        C: { label: "Delay launch for data mapping", trust: +3, compliance: +3, velocity: -3 }
      }
    },
    2: {
      title: "River of Vendors",
      description: "Your analytics vendor was fined for shady practices. No DPA signed. Legal is OOO.",
      options: {
        A: { label: "Proceed", trust: -3, compliance: -5, velocity: +2 },
        B: { label: "Choose certified vendor", trust: +3, compliance: +4, velocity: -3 },
        C: { label: "Wait for legal", trust: -1, compliance: -2, velocity: 0 }
      }
    },
    3: {
      title: "UX Snakebite",
      description: "Marketing requests pop-up for birthday, zip code, shopping habits before user sees value",
      options: {
        A: { label: "Ship pop-up now", trust: -4, compliance: -3, velocity: +2 },
        B: { label: "Delay collection post-value", trust: +2, compliance: +2, velocity: -1 },
        C: { label: "Redesign UX with privacy principles", trust: +3, compliance: +3, velocity: -2 }
      }
    },
    4: {
      title: "Surveillance Storm",
      description: "Privacy orgs accuse your product of surveillance. A regulator tweets at you.",
      options: {
        A: { label: "Deny wrongdoing", trust: -5, compliance: -4, velocity: +2 },
        B: { label: "Apologize, tweak settings", trust: +1, compliance: +2, velocity: 0 },
        C: { label: "Full transparency + opt-outs", trust: +4, compliance: +4, velocity: -2 }
      }
    },
    5: {
      title: "Global Expansion Canyon",
      description: "Expanding to EU, LATAM, APAC with different privacy laws. No localized settings.",
      options: {
        A: { label: "Use U.S model globally", trust: -4, compliance: -5, velocity: +3 },
        B: { label: "Delay to localize", trust: +3, compliance: +5, velocity: -3 },
        C: { label: "Launch in low-regulation markets first", trust: -1, compliance: -2, velocity: +2 }
      }
    }
  };

  // Save team data whenever scores or choices change (only if team is registered)
  useEffect(() => {
    if (teamName && isTeamRegistered) {
      saveTeamData();
    }
  }, [scores, roundChoices, teamName, isTeamRegistered]);

  const registerTeam = () => {
    const trimmedName = teamName.trim();
    if (!trimmedName) {
      alert('Please enter a team name');
      return;
    }
    
    const existingTeam = teams.find(team => team.name.toLowerCase() === trimmedName.toLowerCase());
    if (existingTeam) {
      const confirmOverwrite = window.confirm(
        `Team "${trimmedName}" already exists. Do you want to continue playing as this team?`
      );
      if (!confirmOverwrite) {
        return;
      }
      // Load existing team data
      setScores(existingTeam.scores);
      setRoundChoices(existingTeam.roundChoices);
    }
    
    setTeamName(trimmedName);
    setIsTeamRegistered(true);
  };

  const changeTeam = () => {
    setIsTeamRegistered(false);
    setTeamName('');
    setScores({ trust: 10, compliance: 10, velocity: 10 });
    setRoundChoices({
      1: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      2: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      3: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      4: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      5: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' }
    });
  };

  const saveTeamData = () => {
    if (!teamName.trim()) return;
    
    const teamData = {
      name: teamName,
      scores: { ...scores },
      roundChoices: { ...roundChoices },
      lastUpdated: new Date().toISOString(),
      isGameOver: scores.trust <= 0 || scores.compliance <= 0 || scores.velocity <= 0,
      hasWon: scores.trust > 0 && scores.compliance > 0 && scores.velocity > 0 && 
        Object.values(roundChoices).every(round => round.choice !== ''),
      completedRounds: Object.values(roundChoices).filter(round => round.choice !== '').length
    };

    setTeams(prevTeams => {
      const existingIndex = prevTeams.findIndex(team => team.name === teamName);
      if (existingIndex >= 0) {
        const updated = [...prevTeams];
        updated[existingIndex] = teamData;
        return updated;
      } else {
        return [...prevTeams, teamData];
      }
    });
  };

  const handleChoiceChange = (round, choice) => {
    const scenario = scenarios[round];
    const option = scenario.options[choice];
    
    const newRoundChoices = {
      ...roundChoices,
      [round]: {
        choice,
        trust: option.trust,
        compliance: option.compliance,
        velocity: option.velocity,
        notes: roundChoices[round].notes
      }
    };
    
    setRoundChoices(newRoundChoices);
    
    // Recalculate total scores
    const newScores = { trust: 10, compliance: 10, velocity: 10 };
    Object.values(newRoundChoices).forEach(round => {
      newScores.trust += round.trust;
      newScores.compliance += round.compliance;
      newScores.velocity += round.velocity;
    });
    
    setScores(newScores);
  };

  const handleNotesChange = (round, notes) => {
    setRoundChoices({
      ...roundChoices,
      [round]: { ...roundChoices[round], notes }
    });
  };

  const resetGame = () => {
    setScores({ trust: 10, compliance: 10, velocity: 10 });
    setRoundChoices({
      1: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      2: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      3: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      4: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      5: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' }
    });
  };

  const clearAllTeams = () => {
    const confirmClear = window.confirm('Are you sure you want to clear all team data? This cannot be undone.');
    if (confirmClear) {
      setTeams([]);
    }
  };

  const exportTeamData = () => {
    const dataStr = JSON.stringify(teams, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `privacy-trail-teams-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    URL.revokeObjectURL(url);
  };

  const exportCSV = () => {
    const headers = ['Team Name', 'Total Score', 'Trust', 'Compliance', 'Velocity', 'Completed Rounds', 'Status', 'Last Updated'];
    const csvData = teams.map(team => [
      team.name,
      team.scores.trust + team.scores.compliance + team.scores.velocity,
      team.scores.trust,
      team.scores.compliance,
      team.scores.velocity,
      team.completedRounds,
      team.hasWon ? 'Winner' : team.isGameOver ? 'Game Over' : 'In Progress',
      new Date(team.lastUpdated).toLocaleString()
    ]);
    
    const csvContent = [headers, ...csvData].map(row => row.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `privacy-trail-results-${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
    URL.revokeObjectURL(url);
  };

  // Filter and sort teams
  const filteredTeams = teams.filter(team => {
    const matchesSearch = team.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || 
      (statusFilter === 'active' && !team.hasWon && !team.isGameOver) ||
      (statusFilter === 'completed' && team.hasWon) ||
      (statusFilter === 'failed' && team.isGameOver);
    return matchesSearch && matchesStatus;
  });

  const sortedTeams = [...filteredTeams].sort((a, b) => {
    if (sortBy === 'score') {
      // Winners first
      if (a.hasWon && !b.hasWon) return -1;
      if (!a.hasWon && b.hasWon) return 1;
      
      // Then by total score
      const aTotalScore = a.scores.trust + a.scores.compliance + a.scores.velocity;
      const bTotalScore = b.scores.trust + b.scores.compliance + b.scores.velocity;
      
      if (aTotalScore !== bTotalScore) return bTotalScore - aTotalScore;
      
      // Then by completed rounds
      return b.completedRounds - a.completedRounds;
    } else if (sortBy === 'name') {
      return a.name.localeCompare(b.name);
    } else if (sortBy === 'progress') {
      return b.completedRounds - a.completedRounds;
    }
    return 0;
  });

  const getScoreColor = (score) => {
    if (score <= 0) return 'text-red-600 font-bold';
    if (score <= 3) return 'text-orange-500 font-semibold';
    if (score <= 6) return 'text-yellow-500';
    return 'text-green-600';
  };

  const getScoreStatus = (score) => {
    if (score <= 0) return 'DEAD';
    if (score <= 3) return 'CRITICAL';
    if (score <= 6) return 'WARNING';
    return 'HEALTHY';
  };

  const isGameOver = scores.trust <= 0 || scores.compliance <= 0 || scores.velocity <= 0;
  const hasWon = scores.trust > 0 && scores.compliance > 0 && scores.velocity > 0 && 
    Object.values(roundChoices).every(round => round.choice !== '');

  const renderDashboard = () => (
    <div className="space-y-6">
      <div className="bg-gradient-to-r from-purple-100 to-blue-100 p-6 rounded-lg border-2 border-purple-200">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold text-gray-800 flex items-center">
            <BarChart3 className="w-8 h-8 mr-3 text-purple-600" />
            Team Dashboard
          </h2>
          <div className="text-sm text-gray-600">
            {teams.length} team{teams.length !== 1 ? 's' : ''} registered
          </div>
        </div>
        
        {teams.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <Users className="w-12 h-12 mx-auto mb-3 opacity-50" />
            <p>No teams have started playing yet!</p>
            <p className="text-sm">Switch to Game view to start playing.</p>
          </div>
        ) : (
          <>
            {/* Controls */}
            <div className="bg-white rounded-lg p-4 mb-6 shadow-md">
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                {/* Search */}
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                  <input
                    type="text"
                    placeholder="Search teams..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                
                {/* Status Filter */}
                <div className="relative">
                  <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                  <select
                    value={statusFilter}
                    onChange={(e) => setStatusFilter(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none"
                  >
                    <option value="all">All Teams</option>
                    <option value="active">Active</option>
                    <option value="completed">Winners</option>
                    <option value="failed">Game Over</option>
                  </select>
                </div>
                
                {/* Sort By */}
                <select
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value)}
                  className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="score">Sort by Score</option>
                  <option value="name">Sort by Name</option>
                  <option value="progress">Sort by Progress</option>
                </select>
                
                {/* Export Buttons */}
                <div className="flex gap-2">
                  <button
                    onClick={exportCSV}
                    className="flex-1 bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-3 rounded-lg transition-colors text-sm"
                    disabled={teams.length === 0}
                  >
                    <Download className="w-4 h-4 inline mr-1" />
                    CSV
                  </button>
                  <button
                    onClick={exportTeamData}
                    className="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-3 rounded-lg transition-colors text-sm"
                    disabled={teams.length === 0}
                  >
                    <Download className="w-4 h-4 inline mr-1" />
                    JSON
                  </button>
                </div>
              </div>
              
              <div className="mt-3 text-sm text-gray-600">
                Showing {sortedTeams.length} of {teams.length} teams
              </div>
            </div>

            {/* Quick Stats */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
              <div className="bg-white p-4 rounded-lg shadow-md text-center">
                <div className="text-2xl font-bold text-green-600">
                  {teams.filter(t => t.hasWon).length}
                </div>
                <div className="text-sm text-gray-600">Winners</div>
              </div>
              <div className="bg-white p-4 rounded-lg shadow-md text-center">
                <div className="text-2xl font-bold text-red-600">
                  {teams.filter(t => t.isGameOver && !t.hasWon).length}
                </div>
                <div className="text-sm text-gray-600">Game Over</div>
              </div>
              <div className="bg-white p-4 rounded-lg shadow-md text-center">
                <div className="text-2xl font-bold text-blue-600">
                  {teams.filter(t => !t.hasWon && !t.isGameOver).length}
                </div>
                <div className="text-sm text-gray-600">In Progress</div>
              </div>
              <div className="bg-white p-4 rounded-lg shadow-md text-center">
                <div className="text-2xl font-bold text-purple-600">
                  {Math.round(teams.reduce((sum, t) => sum + t.completedRounds, 0) / teams.length * 10) / 10 || 0}
                </div>
                <div className="text-sm text-gray-600">Avg Rounds</div>
              </div>
            </div>

            {/* Leaderboard */}
            <div className="bg-white rounded-lg shadow-lg overflow-hidden mb-6">
              <div className="bg-gradient-to-r from-yellow-400 to-orange-400 p-4">
                <h3 className="text-xl font-bold text-white flex items-center">
                  <Trophy className="w-6 h-6 mr-2" />
                  Leaderboard
                </h3>
              </div>
              <div className="divide-y divide-gray-200 max-h-96 overflow-y-auto">
                {sortedTeams.map((team, index) => (
                  <div key={team.name} className="p-4 hover:bg-gray-50">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <div className="mr-4">
                          {index === 0 && team.hasWon && (
                            <Trophy className="w-6 h-6 text-yellow-500" />
                          )}
                          {index === 1 && (
                            <Medal className="w-6 h-6 text-gray-400" />
                          )}
                          {index === 2 && (
                            <Medal className="w-6 h-6 text-orange-600" />
                          )}
                          {index > 2 && (
                            <span className="w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center text-sm font-semibold">
                              {index + 1}
                            </span>
                          )}
                        </div>
                        <div>
                          <h4 className="font-bold text-lg">{team.name}</h4>
                          <div className="flex items-center space-x-4 text-sm">
                            <span>Rounds: {team.completedRounds}/5</span>
                            {team.hasWon && (
                              <span className="bg-green-100 text-green-800 px-2 py-1 rounded font-medium">
                                🎉 WINNER
                              </span>
                            )}
                            {team.isGameOver && !team.hasWon && (
                              <span className="bg-red-100 text-red-800 px-2 py-1 rounded font-medium">
                                💀 GAME OVER
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-lg font-bold">
                          Total: {team.scores.trust + team.scores.compliance + team.scores.velocity}
                        </div>
                        <div className="text-xs text-gray-500">
                          T:{team.scores.trust} C:{team.scores.compliance} V:{team.scores.velocity}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Detailed Team Scores - Limited to top 10 */}
            <div className="mb-4">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-lg font-bold text-gray-700">Team Details</h3>
                <div className="text-sm text-gray-500">
                  Showing top {Math.min(10, sortedTeams.length)} teams
                </div>
              </div>
            </div>
            <div className="grid gap-6 max-h-96 overflow-y-auto">
              {sortedTeams.slice(0, 10).map(team => (
                <div key={team.name} className="bg-white rounded-lg shadow-lg p-6 border-2 border-gray-200">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-bold text-gray-800">{team.name}</h3>
                    <div className="text-sm text-gray-500">
                      Updated: {new Date(team.lastUpdated).toLocaleTimeString()}
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-4 mb-4">
                    <div className="text-center p-3 bg-blue-50 rounded-lg">
                      <Shield className="w-6 h-6 mx-auto mb-1 text-blue-600" />
                      <div className="text-sm font-medium text-gray-600">Trust</div>
                      <div className={`text-2xl font-bold ${getScoreColor(team.scores.trust)}`}>
                        {team.scores.trust}
                      </div>
                    </div>
                    <div className="text-center p-3 bg-green-50 rounded-lg">
                      <CheckCircle className="w-6 h-6 mx-auto mb-1 text-green-600" />
                      <div className="text-sm font-medium text-gray-600">Compliance</div>
                      <div className={`text-2xl font-bold ${getScoreColor(team.scores.compliance)}`}>
                        {team.scores.compliance}
                      </div>
                    </div>
                    <div className="text-center p-3 bg-yellow-50 rounded-lg">
                      <Zap className="w-6 h-6 mx-auto mb-1 text-yellow-600" />
                      <div className="text-sm font-medium text-gray-600">Velocity</div>
                      <div className={`text-2xl font-bold ${getScoreColor(team.scores.velocity)}`}>
                        {team.scores.velocity}
                      </div>
                    </div>
                  </div>

                  {/* Round Progress */}
                  <div className="mb-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium">Progress</span>
                      <span className="text-sm text-gray-500">{team.completedRounds}/5 rounds</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${(team.completedRounds / 5) * 100}%` }}
                      ></div>
                    </div>
                  </div>

                  {/* Round Choices Summary */}
                  <div className="grid grid-cols-5 gap-2">
                    {[1, 2, 3, 4, 5].map(round => (
                      <div key={round} className="text-center">
                        <div className="text-xs font-medium text-gray-600 mb-1">R{round}</div>
                        <div className={`w-8 h-8 mx-auto rounded-full flex items-center justify-center text-xs font-bold ${
                          team.roundChoices[round]?.choice 
                            ? 'bg-green-100 text-green-800 border-2 border-green-300' 
                            : 'bg-gray-100 text-gray-400 border-2 border-gray-200'
                        }`}>
                          {team.roundChoices[round]?.choice || '?'}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </>
        )}
      </div>
      
      <div className="text-center">
        <button
          onClick={clearAllTeams}
          className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg transition-colors mr-4"
          disabled={teams.length === 0}
        >
          🗑️ Clear All Teams
        </button>
        <div className="mt-4 text-sm text-gray-600">
          <p>💡 <strong>Multi-Team Instructions:</strong></p>
          <p>• Each team registers with a unique name and plays independently</p>
          <p>• All teams can view this dashboard to see everyone's progress</p>
          <p>• The leaderboard updates in real-time as teams make choices</p>
          <p>• Up to 100+ teams can play simultaneously!</p>
          <p>• Use search and filters to manage large groups</p>
          <p>• Export data as CSV or JSON for analysis</p>
        </div>
      </div>
    </div>
  );

  return (
    <div className="max-w-6xl mx-auto p-6 bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
      <div className="bg-white rounded-lg shadow-xl p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">🛤️ The Privacy Trail</h1>
          <p className="text-lg text-gray-600 italic">Survive the Trail. Protect the Trust. Avoid Dying of a Data Breach.</p>
          
          {/* View Toggle */}
          <div className="flex justify-center mt-6">
            <div className="bg-gray-200 p-1 rounded-lg">
              <button
                onClick={() => setCurrentView('game')}
                className={`px-4 py-2 rounded-md font-medium transition-all ${
                  currentView === 'game'
                    ? 'bg-blue-500 text-white shadow-md'
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                <Gamepad2 className="w-4 h-4 inline mr-2" />
                Game
              </button>
              <button
                onClick={() => setCurrentView('dashboard')}
                className={`px-4 py-2 rounded-md font-medium transition-all ${
                  currentView === 'dashboard'
                    ? 'bg-blue-500 text-white shadow-md'
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                <BarChart3 className="w-4 h-4 inline mr-2" />
                Dashboard ({teams.length})
              </button>
            </div>
          </div>
        </div>

        {currentView === 'dashboard' ? renderDashboard() : (
          <>
            {!isTeamRegistered ? (
              // Team Registration
              <div className="mb-8">
                <label className="block text-lg font-semibold text-gray-700 mb-2">
                  <Users className="inline w-5 h-5 mr-2" />
                  Team Name:
                </label>
                <div className="flex gap-3">
                  <input
                    type="text"
                    value={teamName}
                    onChange={(e) => setTeamName(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && registerTeam()}
                    className="flex-1 p-3 border-2 border-gray-300 rounded-lg text-lg font-medium"
                    placeholder="Enter your team name..."
                  />
                  <button
                    onClick={register
