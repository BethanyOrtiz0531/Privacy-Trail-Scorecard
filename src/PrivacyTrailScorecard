import React, { useState, useEffect } from 'react';
import { Users, Shield, Zap, Target, AlertTriangle, CheckCircle, BarChart3, Gamepad2, Trophy, Medal } from 'lucide-react';

const PrivacyTrailScorecard = () => {
  const [currentView, setCurrentView] = useState('game'); // 'game' or 'dashboard'
  const [teamName, setTeamName] = useState('');
  const [isTeamRegistered, setIsTeamRegistered] = useState(false);
  const [teams, setTeams] = useState([]); // Store all teams
  const [scores, setScores] = useState({
    trust: 10,
    compliance: 10,
    velocity: 10
  });
  
  const [roundChoices, setRoundChoices] = useState({
    1: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
    2: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
    3: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
    4: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
    5: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' }
  });

  const scenarios = {
    1: {
      title: "The Great Data Grab",
      description: "Your team wants to collect as much user data as possible for future personalization",
      options: {
        A: { label: "Collect Everything", trust: -3, compliance: -3, velocity: +3 },
        B: { label: "Collect what you need", trust: +2, compliance: +3, velocity: -1 },
        C: { label: "Delay launch for data mapping", trust: +3, compliance: +3, velocity: -3 }
      }
    },
    2: {
      title: "River of Vendors",
      description: "Your analytics vendor was fined for shady practices. No DPA signed. Legal is OOO.",
      options: {
        A: { label: "Proceed", trust: -3, compliance: -5, velocity: +2 },
        B: { label: "Choose certified vendor", trust: +3, compliance: +4, velocity: -3 },
        C: { label: "Wait for legal", trust: -1, compliance: -2, velocity: 0 }
      }
    },
    3: {
      title: "UX Snakebite",
      description: "Marketing requests pop-up for birthday, zip code, shopping habits before user sees value",
      options: {
        A: { label: "Ship pop-up now", trust: -4, compliance: -3, velocity: +2 },
        B: { label: "Delay collection post-value", trust: +2, compliance: +2, velocity: -1 },
        C: { label: "Redesign UX with privacy principles", trust: +3, compliance: +3, velocity: -2 }
      }
    },
    4: {
      title: "Surveillance Storm",
      description: "Privacy orgs accuse your product of surveillance. A regulator tweets at you.",
      options: {
        A: { label: "Deny wrongdoing", trust: -5, compliance: -4, velocity: +2 },
        B: { label: "Apologize, tweak settings", trust: +1, compliance: +2, velocity: 0 },
        C: { label: "Full transparency + opt-outs", trust: +4, compliance: +4, velocity: -2 }
      }
    },
    5: {
      title: "Global Expansion Canyon",
      description: "Expanding to EU, LATAM, APAC with different privacy laws. No localized settings.",
      options: {
        A: { label: "Use U.S model globally", trust: -4, compliance: -5, velocity: +3 },
        B: { label: "Delay to localize", trust: +3, compliance: +5, velocity: -3 },
        C: { label: "Launch in low-regulation markets first", trust: -1, compliance: -2, velocity: +2 }
      }
    }
  };

  // Save team data whenever scores or choices change (only if team is registered)
  useEffect(() => {
    if (teamName && isTeamRegistered) {
      saveTeamData();
    }
  }, [scores, roundChoices, teamName, isTeamRegistered]);

  const registerTeam = () => {
    const trimmedName = teamName.trim();
    if (!trimmedName) {
      alert('Please enter a team name');
      return;
    }
    
    const existingTeam = teams.find(team => team.name.toLowerCase() === trimmedName.toLowerCase());
    if (existingTeam) {
      const confirmOverwrite = window.confirm(
        `Team "${trimmedName}" already exists. Do you want to continue playing as this team?`
      );
      if (!confirmOverwrite) {
        return;
      }
      // Load existing team data
      setScores(existingTeam.scores);
      setRoundChoices(existingTeam.roundChoices);
    }
    
    setTeamName(trimmedName);
    setIsTeamRegistered(true);
  };

  const changeTeam = () => {
    setIsTeamRegistered(false);
    setTeamName('');
    setScores({ trust: 10, compliance: 10, velocity: 10 });
    setRoundChoices({
      1: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      2: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      3: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      4: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      5: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' }
    });
  };

  const saveTeamData = () => {
    if (!teamName.trim()) return;
    
    const teamData = {
      name: teamName,
      scores: { ...scores },
      roundChoices: { ...roundChoices },
      lastUpdated: new Date().toISOString(),
      isGameOver: scores.trust <= 0 || scores.compliance <= 0 || scores.velocity <= 0,
      hasWon: scores.trust > 0 && scores.compliance > 0 && scores.velocity > 0 && 
        Object.values(roundChoices).every(round => round.choice !== ''),
      completedRounds: Object.values(roundChoices).filter(round => round.choice !== '').length
    };

    setTeams(prevTeams => {
      const existingIndex = prevTeams.findIndex(team => team.name === teamName);
      if (existingIndex >= 0) {
        const updated = [...prevTeams];
        updated[existingIndex] = teamData;
        return updated;
      } else {
        return [...prevTeams, teamData];
      }
    });
  };

  const handleChoiceChange = (round, choice) => {
    const scenario = scenarios[round];
    const option = scenario.options[choice];
    
    const newRoundChoices = {
      ...roundChoices,
      [round]: {
        choice,
        trust: option.trust,
        compliance: option.compliance,
        velocity: option.velocity,
        notes: roundChoices[round].notes
      }
    };
    
    setRoundChoices(newRoundChoices);
    
    // Recalculate total scores
    const newScores = { trust: 10, compliance: 10, velocity: 10 };
    Object.values(newRoundChoices).forEach(round => {
      newScores.trust += round.trust;
      newScores.compliance += round.compliance;
      newScores.velocity += round.velocity;
    });
    
    setScores(newScores);
  };

  const handleNotesChange = (round, notes) => {
    setRoundChoices({
      ...roundChoices,
      [round]: { ...roundChoices[round], notes }
    });
  };

  const resetGame = () => {
    setScores({ trust: 10, compliance: 10, velocity: 10 });
    setRoundChoices({
      1: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      2: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      3: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      4: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' },
      5: { choice: '', trust: 0, compliance: 0, velocity: 0, notes: '' }
    });
  };

  const clearAllTeams = () => {
    setTeams([]);
  };

  const getScoreColor = (score) => {
    if (score <= 0) return 'text-red-600 font-bold';
    if (score <= 3) return 'text-orange-500 font-semibold';
    if (score <= 6) return 'text-yellow-500';
    return 'text-green-600';
  };

  const getScoreStatus = (score) => {
    if (score <= 0) return 'DEAD';
    if (score <= 3) return 'CRITICAL';
    if (score <= 6) return 'WARNING';
    return 'HEALTHY';
  };

  const isGameOver = scores.trust <= 0 || scores.compliance <= 0 || scores.velocity <= 0;
  const hasWon = scores.trust > 0 && scores.compliance > 0 && scores.velocity > 0 && 
    Object.values(roundChoices).every(round => round.choice !== '');

  // Sort teams for leaderboard
  const sortedTeams = [...teams].sort((a, b) => {
    // Winners first
    if (a.hasWon && !b.hasWon) return -1;
    if (!a.hasWon && b.hasWon) return 1;
    
    // Then by total score
    const aTotalScore = a.scores.trust + a.scores.compliance + a.scores.velocity;
    const bTotalScore = b.scores.trust + b.scores.compliance + b.scores.velocity;
    
    if (aTotalScore !== bTotalScore) return bTotalScore - aTotalScore;
    
    // Then by completed rounds
    return b.completedRounds - a.completedRounds;
  });

  const renderDashboard = () => (
    <div className="space-y-6">
      <div className="bg-gradient-to-r from-purple-100 to-blue-100 p-6 rounded-lg border-2 border-purple-200">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold text-gray-800 flex items-center">
            <BarChart3 className="w-8 h-8 mr-3 text-purple-600" />
            Team Dashboard
          </h2>
          <div className="text-sm text-gray-600">
            {teams.length} team{teams.length !== 1 ? 's' : ''} registered
          </div>
        </div>
        
        {teams.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <Users className="w-12 h-12 mx-auto mb-3 opacity-50" />
            <p>No teams have started playing yet!</p>
            <p className="text-sm">Switch to Game view to start playing.</p>
          </div>
        ) : (
          <>
            {/* Leaderboard */}
            <div className="bg-white rounded-lg shadow-lg overflow-hidden mb-6">
              <div className="bg-gradient-to-r from-yellow-400 to-orange-400 p-4">
                <h3 className="text-xl font-bold text-white flex items-center">
                  <Trophy className="w-6 h-6 mr-2" />
                  Leaderboard
                </h3>
              </div>
              <div className="divide-y divide-gray-200">
                {sortedTeams.map((team, index) => (
                  <div key={team.name} className="p-4 hover:bg-gray-50">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <div className="mr-4">
                          {index === 0 && team.hasWon && (
                            <Trophy className="w-6 h-6 text-yellow-500" />
                          )}
                          {index === 1 && (
                            <Medal className="w-6 h-6 text-gray-400" />
                          )}
                          {index === 2 && (
                            <Medal className="w-6 h-6 text-orange-600" />
                          )}
                          {index > 2 && (
                            <span className="w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center text-sm font-semibold">
                              {index + 1}
                            </span>
                          )}
                        </div>
                        <div>
                          <h4 className="font-bold text-lg">{team.name}</h4>
                          <div className="flex items-center space-x-4 text-sm">
                            <span>Rounds: {team.completedRounds}/5</span>
                            {team.hasWon && (
                              <span className="bg-green-100 text-green-800 px-2 py-1 rounded font-medium">
                                🎉 WINNER
                              </span>
                            )}
                            {team.isGameOver && !team.hasWon && (
                              <span className="bg-red-100 text-red-800 px-2 py-1 rounded font-medium">
                                💀 GAME OVER
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-lg font-bold">
                          Total: {team.scores.trust + team.scores.compliance + team.scores.velocity}
                        </div>
                        <div className="text-xs text-gray-500">
                          T:{team.scores.trust} C:{team.scores.compliance} V:{team.scores.velocity}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Detailed Team Scores */}
            <div className="grid gap-6">
              {teams.map(team => (
                <div key={team.name} className="bg-white rounded-lg shadow-lg p-6 border-2 border-gray-200">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-bold text-gray-800">{team.name}</h3>
                    <div className="text-sm text-gray-500">
                      Updated: {new Date(team.lastUpdated).toLocaleTimeString()}
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-4 mb-4">
                    <div className="text-center p-3 bg-blue-50 rounded-lg">
                      <Shield className="w-6 h-6 mx-auto mb-1 text-blue-600" />
                      <div className="text-sm font-medium text-gray-600">Trust</div>
                      <div className={`text-2xl font-bold ${getScoreColor(team.scores.trust)}`}>
                        {team.scores.trust}
                      </div>
                    </div>
                    <div className="text-center p-3 bg-green-50 rounded-lg">
                      <CheckCircle className="w-6 h-6 mx-auto mb-1 text-green-600" />
                      <div className="text-sm font-medium text-gray-600">Compliance</div>
                      <div className={`text-2xl font-bold ${getScoreColor(team.scores.compliance)}`}>
                        {team.scores.compliance}
                      </div>
                    </div>
                    <div className="text-center p-3 bg-yellow-50 rounded-lg">
                      <Zap className="w-6 h-6 mx-auto mb-1 text-yellow-600" />
                      <div className="text-sm font-medium text-gray-600">Velocity</div>
                      <div className={`text-2xl font-bold ${getScoreColor(team.scores.velocity)}`}>
                        {team.scores.velocity}
                      </div>
                    </div>
                  </div>

                  {/* Round Progress */}
                  <div className="mb-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium">Progress</span>
                      <span className="text-sm text-gray-500">{team.completedRounds}/5 rounds</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${(team.completedRounds / 5) * 100}%` }}
                      ></div>
                    </div>
                  </div>

                  {/* Round Choices Summary */}
                  <div className="grid grid-cols-5 gap-2">
                    {[1, 2, 3, 4, 5].map(round => (
                      <div key={round} className="text-center">
                        <div className="text-xs font-medium text-gray-600 mb-1">R{round}</div>
                        <div className={`w-8 h-8 mx-auto rounded-full flex items-center justify-center text-xs font-bold ${
                          team.roundChoices[round]?.choice 
                            ? 'bg-green-100 text-green-800 border-2 border-green-300' 
                            : 'bg-gray-100 text-gray-400 border-2 border-gray-200'
                        }`}>
                          {team.roundChoices[round]?.choice || '?'}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </>
        )}
      </div>
      
      <div className="text-center">
        <button
          onClick={clearAllTeams}
          className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg transition-colors mr-4"
          disabled={teams.length === 0}
        >
          🗑️ Clear All Teams
        </button>
      </div>
    </div>
  );

  return (
    <div className="max-w-6xl mx-auto p-6 bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
      <div className="bg-white rounded-lg shadow-xl p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">🛤️ The Privacy Trail</h1>
          <p className="text-lg text-gray-600 italic">Survive the Trail. Protect the Trust. Avoid Dying of a Data Breach.</p>
          
          {/* View Toggle */}
          <div className="flex justify-center mt-6">
            <div className="bg-gray-200 p-1 rounded-lg">
              <button
                onClick={() => setCurrentView('game')}
                className={`px-4 py-2 rounded-md font-medium transition-all ${
                  currentView === 'game'
                    ? 'bg-blue-500 text-white shadow-md'
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                <Gamepad2 className="w-4 h-4 inline mr-2" />
                Game
              </button>
              <button
                onClick={() => setCurrentView('dashboard')}
                className={`px-4 py-2 rounded-md font-medium transition-all ${
                  currentView === 'dashboard'
                    ? 'bg-blue-500 text-white shadow-md'
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                <BarChart3 className="w-4 h-4 inline mr-2" />
                Dashboard ({teams.length})
              </button>
            </div>
          </div>
        </div>

        {currentView === 'dashboard' ? renderDashboard() : (
          <>
            {!isTeamRegistered ? (
              // Team Registration
              <div className="mb-8">
                <label className="block text-lg font-semibold text-gray-700 mb-2">
                  <Users className="inline w-5 h-5 mr-2" />
                  Team Name:
                </label>
                <div className="flex gap-3">
                  <input
                    type="text"
                    value={teamName}
                    onChange={(e) => setTeamName(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && registerTeam()}
                    className="flex-1 p-3 border-2 border-gray-300 rounded-lg text-lg font-medium"
                    placeholder="Enter your team name..."
                  />
                  <button
                    onClick={registerTeam}
                    className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-lg transition-colors"
                  >
                    Enter Team
                  </button>
                </div>
                <p className="text-sm text-gray-500 mt-2">
                  Enter your team name to start playing. Each team name can only be used once.
                </p>
              </div>
            ) : (
              <>
                {/* Team Info */}
                <div className="mb-8 bg-blue-50 p-4 rounded-lg border-2 border-blue-200">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <Users className="w-5 h-5 mr-2 text-blue-600" />
                      <span className="text-lg font-semibold text-gray-700">Playing as: </span>
                      <span className="text-lg font-bold text-blue-800">{teamName}</span>
                    </div>
                    <button
                      onClick={changeTeam}
                      className="bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-lg transition-colors text-sm"
                    >
                      Change Team
                    </button>
                  </div>
                </div>

            {/* Current Scores */}
            <div className="grid grid-cols-3 gap-6 mb-8">
              <div className="bg-blue-50 p-6 rounded-lg text-center border-2 border-blue-200">
                <Shield className="w-8 h-8 mx-auto mb-2 text-blue-600" />
                <h3 className="text-lg font-semibold text-gray-700">Trust</h3>
                <p className={`text-3xl font-bold ${getScoreColor(scores.trust)}`}>
                  {scores.trust}
                </p>
                <p className={`text-sm font-medium ${getScoreColor(scores.trust)}`}>
                  {getScoreStatus(scores.trust)}
                </p>
              </div>
              <div className="bg-green-50 p-6 rounded-lg text-center border-2 border-green-200">
                <CheckCircle className="w-8 h-8 mx-auto mb-2 text-green-600" />
                <h3 className="text-lg font-semibold text-gray-700">Compliance</h3>
                <p className={`text-3xl font-bold ${getScoreColor(scores.compliance)}`}>
                  {scores.compliance}
                </p>
                <p className={`text-sm font-medium ${getScoreColor(scores.compliance)}`}>
                  {getScoreStatus(scores.compliance)}
                </p>
              </div>
              <div className="bg-yellow-50 p-6 rounded-lg text-center border-2 border-yellow-200">
                <Zap className="w-8 h-8 mx-auto mb-2 text-yellow-600" />
                <h3 className="text-lg font-semibold text-gray-700">Velocity</h3>
                <p className={`text-3xl font-bold ${getScoreColor(scores.velocity)}`}>
                  {scores.velocity}
                </p>
                <p className={`text-sm font-medium ${getScoreColor(scores.velocity)}`}>
                  {getScoreStatus(scores.velocity)}
                </p>
              </div>
            </div>

            {/* Game Over / Won Messages */}
            {isGameOver && (
              <div className="bg-red-100 border-2 border-red-400 p-6 rounded-lg mb-8 text-center">
                <AlertTriangle className="w-12 h-12 mx-auto mb-3 text-red-600" />
                <h2 className="text-2xl font-bold text-red-800 mb-2">💀 GAME OVER 💀</h2>
                <p className="text-red-700 text-lg">
                  {scores.trust <= 0 && "Trust hit zero - you've been canceled! "}
                  {scores.compliance <= 0 && "Compliance hit zero - you've been fined into oblivion! "}
                  {scores.velocity <= 0 && "Velocity hit zero - you've been outpaced by competitors! "}
                </p>
              </div>
            )}

            {hasWon && !isGameOver && (
              <div className="bg-green-100 border-2 border-green-400 p-6 rounded-lg mb-8 text-center">
                <Target className="w-12 h-12 mx-auto mb-3 text-green-600" />
                <h2 className="text-2xl font-bold text-green-800 mb-2">🎉 ARRIVED IN OREGON! 🎉</h2>
                <p className="text-green-700 text-lg">
                  Congratulations! You've survived the Privacy Trail with all metrics above zero!
                </p>
              </div>
            )}

            {/* Rounds */}
            <div className="space-y-8">
              {Object.entries(scenarios).map(([roundNum, scenario]) => (
                <div key={roundNum} className={`bg-gray-50 p-6 rounded-lg border-2 border-gray-200 ${!isTeamRegistered ? 'opacity-50 pointer-events-none' : ''}`}>
                  <h3 className="text-xl font-bold text-gray-800 mb-2">
                    Round {roundNum}: {scenario.title}
                  </h3>
                  <p className="text-gray-600 mb-4">{scenario.description}</p>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                    {Object.entries(scenario.options).map(([optionKey, option]) => (
                      <label key={optionKey} className="cursor-pointer">
                        <input
                          type="radio"
                          name={`round-${roundNum}`}
                          value={optionKey}
                          checked={roundChoices[roundNum].choice === optionKey}
                          onChange={() => handleChoiceChange(parseInt(roundNum), optionKey)}
                          className="sr-only"
                          disabled={!isTeamRegistered}
                        />
                        <div className={`p-4 border-2 rounded-lg transition-all ${
                          roundChoices[roundNum].choice === optionKey 
                            ? 'border-blue-500 bg-blue-50' 
                            : 'border-gray-300 hover:border-gray-400'
                        }`}>
                          <div className="font-semibold text-gray-800 mb-2">
                            Option {optionKey}: {option.label}
                          </div>
                          <div className="text-sm space-y-1">
                            <div className="flex justify-between">
                              <span>Trust:</span>
                              <span className={option.trust >= 0 ? 'text-green-600' : 'text-red-600'}>
                                {option.trust >= 0 ? '+' : ''}{option.trust}
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span>Compliance:</span>
                              <span className={option.compliance >= 0 ? 'text-green-600' : 'text-red-600'}>
                                {option.compliance >= 0 ? '+' : ''}{option.compliance}
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span>Velocity:</span>
                              <span className={option.velocity >= 0 ? 'text-green-600' : 'text-red-600'}>
                                {option.velocity >= 0 ? '+' : ''}{option.velocity}
                              </span>
                            </div>
                          </div>
                        </div>
                      </label>
                    ))}
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Team Notes:
                    </label>
                    <textarea
                      value={roundChoices[roundNum].notes}
                      onChange={(e) => handleNotesChange(parseInt(roundNum), e.target.value)}
                      className="w-full p-2 border border-gray-300 rounded-md text-sm"
                      rows="2"
                      placeholder="Add your team's reasoning, discussion points, or lessons learned..."
                      disabled={!isTeamRegistered}
                    />
                  </div>
                </div>
              ))}
            </div>

            {/* Reset Button */}
            <div className="mt-8 text-center">
              <button
                onClick={resetGame}
                className="bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg transition-colors disabled:opacity-50"
                disabled={!isTeamRegistered}
              >
                🔄 Reset Current Game
              </button>
              <p className="text-sm text-gray-500 mt-2">
                This will reset your current game progress (team registration remains)
              </p>
            </div>
              </>
            )}

            {/* Game Rules */}
            <div className="mt-12 bg-blue-50 p-6 rounded-lg border-2 border-blue-200">
              <h3 className="text-lg font-bold text-blue-800 mb-3">📋 Game Rules</h3>
              <div className="text-blue-700 space-y-2">
                <p><strong>Starting Points:</strong> Trust: 10, Compliance: 10, Velocity: 10</p>
                <p><strong>Win Condition:</strong> Complete all 5 rounds with all metrics above zero</p>
                <p><strong>Lose Conditions:</strong></p>
                <ul className="list-disc list-inside ml-4 space-y-1">
                  <li>Trust hits zero → You're canceled</li>
                  <li>Compliance hits zero → You're fined into oblivion</li>
                  <li>Velocity hits zero → You're outpaced by competitors</li>
                </ul>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default PrivacyTrailScorecard;
